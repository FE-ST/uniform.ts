// deno-lint-ignore-file no-explicit-any ban-types
import { PMS, TS } from "./Alias";
import ORG, { $bindings$, type $ORG } from "./OrganicType";

//
export const UUIDv4 = () => {
    return (crypto?.randomUUID ? crypto?.randomUUID() : ("10000000-1000-4000-8000-100000000000".replace(/[018]/g, (c) => (+c ^ (crypto.getRandomValues(new Uint8Array(1))[0] & (15 >> (+c / 4)))).toString(16))));
};

//
export type dT = object | Function;
export type rT = WeakRef<dT>;
export type MPromise<T extends unknown> = Promise<T>|T|null;
export type IWrap<T extends unknown> = {
    [pT in keyof T]: MPromise<pT>|IWrap<pT>;
};

//
export type ExChanger = any;

/*
 * Internal types of meta
 * ["@meta"|"@data"]: {
 *   !type: string, // interpretation type (how will resolved)
 *   !uuid: string, // located in remote storage pool
 *   !payload: any, // additional descriptions
 *   !index: number // located in transferable list
 * }
 */

// If someone not in list, will just copy or sharing
export const Transferable = [
    typeof ArrayBuffer               != TS.udf ? ArrayBuffer               : null,
    typeof MessagePort               != TS.udf ? MessagePort               : null,
    typeof ReadableStream            != TS.udf ? ReadableStream            : null,
    typeof WritableStream            != TS.udf ? WritableStream            : null,
    typeof TransformStream           != TS.udf ? TransformStream           : null,
    typeof WebTransportReceiveStream != TS.udf ? WebTransportReceiveStream : null,
    typeof WebTransportSendStream    != TS.udf ? WebTransportSendStream    : null,
    typeof AudioData                 != TS.udf ? AudioData                 : null,
    typeof ImageBitmap               != TS.udf ? ImageBitmap               : null,
    typeof VideoFrame                != TS.udf ? VideoFrame                : null,
    typeof OffscreenCanvas           != TS.udf ? OffscreenCanvas           : null,
    typeof RTCDataChannel            != TS.udf ? RTCDataChannel            : null
].filter((E)=>(E!=null));

export const isSymbol = (sym: unknown) => {
    return ((typeof sym === 'symbol') || (typeof sym == 'object') && (Object.prototype.toString.call(sym) == '[object Symbol]') || false);
};
export const FORBIDDEN_KEYS = new Set(["bind", "toString", "then", "catch", "finally"]);
export const META_KEYS = new Set(Array.from(Object.values(ORG)));
export const wrapExChanger = (exChanger: ExChanger|null): any => {
    if (!exChanger) return null;

    //
    return new Proxy(exChanger, {
        get(target: ExChanger, prop: any): any {
            if (prop == ORG.sync) { return target.sync; };
            if (prop == ORG.exc) { return target; };
            if ( // forbidden actions
                isSymbol(prop) ||
                FORBIDDEN_KEYS.has(prop as string) ||
                META_KEYS?.has?.(prop as any)
            ) { return null; };
            return target?.access?.(prop);
        },
        set(target: ExChanger, prop: string, value: any): any {
            target?.register?.(value, prop); return true;
        }
    });
}

export const isPromise = (target) =>  {
    return (target instanceof PMS) || ((target?.then)? && typeof target.then === "function");
}

export const doOnlyAfterResolve = (meta, cb) => {
    if (isPromise(meta)) {
        return (meta.then ? meta.then(cb).catch(console.trace.bind(console)) : cb(meta));
    }
    return cb(meta);
}

export const getContext = (wModule: any)=>{
    return doOnlyAfterResolve(wModule, (mx)=>{
        return wrapExChanger(mx?.[ORG.exc] ?? $bindings$?.get?.(mx) ?? mx);
    });
}

export const doTransfer = (wModule: any, name: any, node: any|null = null)=>{
    return doOnlyAfterResolve(wModule, (mx)=>{
        const exChanger = mx?.[ORG.exc] ?? $bindings$?.get?.(mx) ?? mx;
        return exChanger?.doTransfer?.(name, node);
    });
}

export const transfer = (wModule: any, node: any|null = null, name: any = "")=>{
    return doOnlyAfterResolve(wModule, (mx)=>{
        const exChanger = mx?.[ORG.exc] ?? $bindings$?.get?.(mx) ?? mx;
        return exChanger?.transfer?.(node, name);
    });
}

export { ORG };
