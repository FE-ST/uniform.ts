import PreCoding from "../PreCoding/PreCoding";
import { doOnlyAfterResolve, ORG } from "../Utils/Useful";

interface Command {
    args: unknown[];
    result?: unknown;
}

const preCoding = new PreCoding();
export const $cd = preCoding;
export const $mp = preCoding.$mp;
export const $dh = preCoding.$hndr;

export const $resolver = (command: Command): unknown => command.result;

export const $handler = (command: Command): Promise<[unknown, unknown[]]> => {
    const [cmd, target, ...args] = command.args;
    const transfer: unknown[] = [];

    if (cmd === "apply" && args.length >= 3) {
        transfer.push(...args.splice(2));
    }

    if (cmd === "dispose") {
        const key = (target && typeof target === "object" ? (target as Record<string, unknown>)[ORG.uuid] : undefined) ?? target;
        $mp.discount(key);
    }

    return doOnlyAfterResolve(
        $cd.decode([cmd, target, ...args], transfer),
        ([decodedCmd, decodedTarget, ...decodedArgs]) => {
            const result = $dh?.$getHandler?.("pms")?.$hnd?.(decodedCmd, decodedTarget, ...decodedArgs);
            const ready = $cd.encode(result, transfer);
            return [ready, transfer];
        }
    );
};