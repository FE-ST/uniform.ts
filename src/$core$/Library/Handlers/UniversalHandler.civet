// deno-lint-ignore-file no-explicit-any
import ObjectProxy from "../../Interface/ObjectProxy";
import {
    MPromise,
    FORBIDDEN_KEYS,
    META_KEYS,
    isSymbol,
    doOnlyAfterResolve,
    isPromise,
    IWrap,
    UUIDv4
} from "../Utils/Useful";
import RemoteReferenceHandler from "./RemoteHandler";
import { extract, MakeReference, wrapWeakMap } from "../Utils/InstructionType";
import { ORG, IMeta } from "../Utils/OrganicType";
import DataHandler from "./DataHandler";

export default class UniversalHandler extends DataHandler {
    #dataHandler: Map<string, DataHandler>;

    constructor(dataHandler: Map<string, DataHandler> = new Map()) {
        super();
        this.#dataHandler = dataHandler;
    }

    get $exc(): unknown {
        return this.#dataHandler.get("rmt")?.$exc;
    }

    $data(t: unknown | string | null): unknown {
        return (t as Record<string, unknown>)?.[ORG.data] ?? t;
    }

    $addHandler(name: string, handler: DataHandler): void {
        this.#dataHandler.set(name, handler);
    }

    $getHandler(name: string): DataHandler | undefined {
        return this.#dataHandler.get(name);
    }

    $hnd(cmd: string = "access", t: unknown, ...args: unknown[]): unknown {
        const data = this.$data(t);

        if (cmd === "get") {
            const key = args[0];
            if (key === ORG.data) return data;
            if (key === ORG.exc)
                return this.$exc ?? (data as Record<string, any>)?.[ORG.exc] ?? data?.then?.((e: any) => e?.[ORG.exc]) ?? null;
            if (
                (isSymbol(key) ||
                    FORBIDDEN_KEYS.has(key as string) ||
                    (META_KEYS.has && META_KEYS.has(key))) &&
                key !== ORG.dispose
            ) {
                return null;
            }
        }

        let htp = "dir";
        if (isPromise(data)) {
            htp = "pms";
        } else {
            const meta = extract(t) as IMeta;
            const local = this.$get(meta as any);
            const overlap = (extract(local) as any)?.[ORG.uuid] === (meta as any)?.[ORG.uuid];

            if (typeof (meta as any)?.[ORG.type] === "string") htp = "loc";
            if (typeof (meta as any)?.[ORG.uuid] === "string" && (!local || overlap)) htp = "rmt";
        }

        return this.#dataHandler.get(htp)?.$hnd(cmd, t, ...args);
    }

    $get(uuid: unknown | string | null): unknown {
        return this.#dataHandler.get("loc")?.$get(uuid);
    }
}

const finalizationCallbacks = new Map<string, () => void>();

const registry = new FinalizationRegistry((key: string) => {
    finalizationCallbacks.get(key)?.();
    finalizationCallbacks.delete(key);
});

export const wrapMeta = <T extends IMeta | unknown>(
    meta: MPromise<T> | IWrap<T> | null,
    handler: UniversalHandler | DataHandler | RemoteReferenceHandler | null = null
): T | object | null => {
    if (typeof meta !== "object" && typeof meta !== "function") return meta;

    const wrap = !(meta as any)?.[ORG.data]
        ? new Proxy(MakeReference(meta), new ObjectProxy(handler ?? new UniversalHandler()))
        : meta;

    doOnlyAfterResolve<IMeta>(meta as MPromise<IMeta>, ($m) => {
        if ($m) {
            doOnlyAfterResolve(wrap, (w) => {
                if (w && (typeof w === "object" || typeof w === "function")) {
                    const organic = wrapWeakMap.get(w) ?? w;
                    const pt = (organic as Record<string, any>)?.[ORG.data] ?? organic;
                    if ((pt as any)?.[ORG.uuid] || (pt as any)?.[ORG.type]) {
                        wrapWeakMap.set(w, pt);
                    }
                }
            });
        }
    });

    const dispose = (wrap as Record<string, any>)?.[ORG.dispose];
    if (dispose) {
        const token = UUIDv4();
        registry.register(wrap, token);
        finalizationCallbacks.set(token, dispose);
    }

    return wrap;
};