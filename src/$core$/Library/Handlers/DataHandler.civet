// deno-lint-ignore-file no-explicit-any
import { FORBIDDEN_KEYS, META_KEYS, isSymbol } from "../Utils/Useful";
import { extract } from "../Utils/InstructionType";
import { type IMeta, ORG } from "../Utils/OrganicType";

export default class DataHandler {
    get /*@__MANGLE_PROP__*/ $exc(): any {
        return null;
    }

    $data<T = unknown>(target: T | string | null): T {
        return target as T;
    }

    $hnd(cmd: string, meta: unknown, ...args: unknown[]): unknown {
        const ref = this.$data(meta);

        if (cmd === "get") {
            if (args[0] === ORG.data) {
                return ref;
            }
            if (args[0] === ORG.exc) {
                return (
                    this.$exc ??
                    ref?.[ORG.exc] ??
                    (typeof ref?.then === "function" && ref.then((e: any) => e?.[ORG.exc])) ??
                    null
                );
            }
            if (
                isSymbol(args[0]) ||
                FORBIDDEN_KEYS.has(args[0] as string) ||
                META_KEYS.has?.(args[0])
            ) {
                return null;
            }
        }

        if (
            ref == null ||
            (typeof ref !== "object" && typeof ref !== "function")
        ) {
            return ref;
        }

        if (cmd === "access") {
            return ref;
        }

        if (cmd === "transfer") {
            const wrap = extract(meta) as IMeta;
            return {
                [ORG.type]: "tf",
                [ORG.node]: ref,
                [ORG.uuid]: (wrap as any)?.[ORG.uuid] ?? ""
            };
        }

        try {
            return Reflect[cmd]?.(ref, ...args);
        } catch (e: unknown) {
            const error = e as Error;
            console.error("Wrong op: " + error.message);
            console.error(error);
            console.trace(error);
        }

        return ref;
    }

    $get(_uuid: unknown | string | null): any {
        return null;
    }
}