import { isSymbol, FORBIDDEN_KEYS, META_KEYS } from "../Utils/Useful";
import { extract } from "../Utils/InstructionType";
import ORG from "../Utils/OrganicType";
import DataHandler from "./DataHandler";

interface ExChanger {
    $request(cmd: string, meta: unknown, args: unknown[]): unknown;
}

export default class RemoteReferenceHandler extends DataHandler {
    #exChanger: ExChanger | null;

    constructor(exChanger: ExChanger | null) {
        super();
        this.#exChanger = exChanger;
    }

    get $exc() {
        return this.#exChanger;
    }

    $data(t: unknown): unknown {
        return extract(t) ?? t;
    }

    $hnd(cmd: string, meta: unknown, ...args: unknown[]): unknown {
        const data = this.$data(meta);
        const firstArg = args[0];

        if (cmd === "get") {
            if (firstArg === ORG.dispose) {
                return () => this.#exChanger?.$request("dispose", meta, []);
            }
            if (firstArg === ORG.data) {
                return data;
            }
            if (firstArg === ORG.exc) {
                return (
                    this.$exc ??
                    data?.[ORG.exc] ??
                    data?.then?.((e: any) => e?.[ORG.exc]) ??
                    null
                );
            }
            if (
                isSymbol(firstArg) ||
                FORBIDDEN_KEYS.has(firstArg as string) ||
                META_KEYS.has?.(firstArg)
            ) {
                return null;
            }
        }

        return this.#exChanger?.$request(cmd, meta, args);
    }

    $get(_: unknown | string | null): unknown {
        return null;
    }
}