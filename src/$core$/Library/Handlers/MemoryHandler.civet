import UUIDMap from "../Utils/UUIDMap";
import { ORG } from "../Utils/OrganicType";
import { extract } from "../Utils/InstructionType";
import DataHandler from "./DataHandler";

export default class ObjectPoolMemberHandler extends DataHandler {
    #memoryPool: UUIDMap | null;

    constructor(memoryPool: UUIDMap | null = new UUIDMap()) {
        super();
        this.#memoryPool = memoryPool;
    }

    $data(param: unknown | string | null): unknown {
        const uuid = this.#resolveUUID(param);
        const member = uuid && this.#memoryPool ? this.#memoryPool.get(uuid) : undefined;
        return super.$data(member ?? param);
    }

    $get(param: unknown | string | null): unknown | null {
        const uuid = this.#resolveUUID(param);
        return uuid && this.#memoryPool ? this.#memoryPool.get(uuid) ?? null : null;
    }

    #resolveUUID(input: unknown | string | null): string | undefined {
        const extracted = extract(input) ?? input;
        if (extracted && typeof extracted === "object" && ORG.uuid in extracted) {
            const id = (extracted as Record<string, unknown>)[ORG.uuid];
            return typeof id === "string" ? id : undefined;
        }
        return typeof extracted === "string" ? extracted : undefined;
    }
}